#version 460 core
#extension GL_ARB_bindless_texture : require
#ifdef GL_ARB_gpu_shader_int64
	#extension GL_ARB_gpu_shader_int64 : enable
#endif

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding=0, rgba8) readonly uniform image2D inputImg;
layout (binding=1, rgba8) writeonly uniform image2D outputImg;

struct FBOTextureHandles
{
	#ifdef GL_ARB_gpu_shader_int64
		uint64_t inputCol;
		uint64_t inputDepth;
	#else
		uint inputColLow;
		uint inputColHigh;
		uint inputDepthLow;
		uint inputDepthHigh;
	#endif
};

layout (binding=2, std140) uniform HandleBlock
{
	FBOTextureHandles data;
} handles;


struct FisheyeData
{
	float strength;
};

layout (binding=3, std140) uniform FEyeDataBlock
{
	FisheyeData data;
} fEyeData;


//Returns new texcoord
vec2 fisheye(vec2 texCoord01, float fisheyeStrength)
{
	vec2 texCoord0Centre = texCoord01*2-1; //Texture coordinate with origin in centre ([0:1] -> [-1:1])
	float radius = length(texCoord0Centre);
	float angle = atan(texCoord0Centre.y, texCoord0Centre.x);
	
	//Simple polynomial fisheye approximation
	float distortedRadius = radius * (1.0 + fisheyeStrength * radius * radius);
	distortedRadius = min(distortedRadius, 1.0);
	vec2 distortedTexCoord = vec2(distortedRadius * cos(angle), distortedRadius * sin(angle));
	distortedTexCoord = distortedTexCoord * 0.5 + 0.5; //[-1,1] -> [0:1]

	return distortedTexCoord;
}


void main()
{
	ivec2 P = ivec2(gl_GlobalInvocationID.xy);
	if (P.x > imageSize(inputImg).x || P.y > imageSize(inputImg).y) { return; }

	//Work in reverse to avoid gaps in image - get tex coord in output image and reverse the distortion to see where that lands in the input image, then sample that point for the output
	vec2 outputTexCoord = vec2(P) / imageSize(outputImg);
	vec2 reverseFisheyeTexCoord = fisheye(outputTexCoord, fEyeData.data.strength);
	reverseFisheyeTexCoord = clamp(reverseFisheyeTexCoord, 0.0, 1.0);

	vec4 col = imageLoad(inputImg, ivec2(reverseFisheyeTexCoord * imageSize(inputImg)));
	imageStore(outputImg, P, col);
}