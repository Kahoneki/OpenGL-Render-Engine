#version 460 core
#extension GL_ARB_bindless_texture : require
#ifdef GL_ARB_gpu_shader_int64
	#extension GL_ARB_gpu_shader_int64 : enable
#endif

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding=0, rgba8) readonly uniform image2D inputImg;
layout (binding=1, rgba8) writeonly uniform image2D outputImg;

struct FBOTextureHandles
{
	#ifdef GL_ARB_gpu_shader_int64
		uint64_t inputCol;
		uint64_t inputDepth;
	#else
		uint inputColLow;
		uint inputColHigh;
		uint inputDepthLow;
		uint inputDepthHigh;
	#endif
};

layout (binding=2, std140) uniform HandleBlock
{
	FBOTextureHandles data;
} handles;


vec4 saturate(vec4 col, float saturationFactor)
{
	vec3 luminanceGreyscale = vec3(dot(col.rgb, vec3(0.299, 0.587, 0.114))); //Calculate luminance greyscale based on standard weight values
	vec3 saturatedColour = mix(luminanceGreyscale, col.rgb, saturationFactor);
	return vec4(saturatedColour, col.a);
}


void main()
{
	ivec2 P = ivec2(gl_GlobalInvocationID.xy);
	if (P.x > imageSize(inputImg).x || P.y > imageSize(inputImg).y) { return; }

	vec4 col = imageLoad(inputImg, P);
	vec4 satCol = saturate(col, 1.0);
	imageStore(outputImg, P, satCol);
}