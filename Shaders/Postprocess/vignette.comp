#version 460 core
#extension GL_ARB_bindless_texture : require
#ifdef GL_ARB_gpu_shader_int64
	#extension GL_ARB_gpu_shader_int64 : enable
#endif

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding=0, rgba8) readonly uniform image2D inputImg;
layout (binding=1, rgba8) writeonly uniform image2D outputImg;

struct FBOTextureHandles
{
	#ifdef GL_ARB_gpu_shader_int64
		uint64_t inputCol;
		uint64_t inputDepth;
	#else
		uint inputColLow;
		uint inputColHigh;
		uint inputDepthLow;
		uint inputDepthHigh;
	#endif
};

layout (binding=2, std140) uniform HandleBlock
{
	FBOTextureHandles data;
} handles;


struct VignetteData
{
	float strength;
};

layout (binding=3, std140) uniform VigDataBlock
{
	VignetteData data;
} vigData;


vec4 vignette(vec4 col, vec2 texCoord01, float vignetteStrength)
{

	vec2 texCoord0Centre = texCoord01*2-1; //Texture coordinate with origin in centre ([0:1] -> [-1:1])
	vec3 colour = mix(col.xyz, vec3(0.0), length(texCoord0Centre)*vignetteStrength);

	return vec4(colour, 1.0);
}


void main()
{
	ivec2 P = ivec2(gl_GlobalInvocationID.xy);
	if (P.x > imageSize(inputImg).x || P.y > imageSize(inputImg).y) { return; }

	vec4 col = imageLoad(inputImg, P);
	vec4 vigCol = vignette(col, vec2(P)/imageSize(inputImg), vigData.data.strength);
	imageStore(outputImg, P, vigCol);
}